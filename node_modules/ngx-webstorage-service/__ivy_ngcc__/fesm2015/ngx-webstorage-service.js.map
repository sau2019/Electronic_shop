{"version":3,"file":"ngx-webstorage-service.js","sources":["ngx-webstorage-service/src/proxy-storage.service.ts","ngx-webstorage-service/src/base-storage.service.ts","ngx-webstorage-service/src/storage-transcoders.ts","ngx-webstorage-service/src/in-memory-storage.service.ts","ngx-webstorage-service/src/web-storage.service.ts","ngx-webstorage-service/src/storage-providers.ts","ngx-webstorage-service/src/storage-service.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n","import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n","import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to ISO strings. */\nexport class DateIsoStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.toISOString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = Date.parse(value);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to epoch timestamps. */\nexport class DateEpochStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.valueOf().toString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = parseInt(value, 10);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>,\n\n    /** Transcoder that encodes/decodes `Date` values into ISO strings. */\n    DATE_ISO_STRING: new DateIsoStorageTranscoder() as StorageTranscoder<Date>,\n\n    /** Transcoder that encodes/decodes `Date` values into epoch timestamps. */\n    DATE_EPOCH_TIME: new DateEpochStorageTranscoder() as StorageTranscoder<Date>\n};\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\nexport function sessionStorageFactory(): StorageService {\n    try {\n        if (typeof sessionStorage as any !== 'undefined' && isStorageAvailable(sessionStorage)) {\n            return new WebStorageService(sessionStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>(\n    'SESSION_STORAGE',\n    { providedIn: 'root', factory: sessionStorageFactory }\n);\n\nexport function localStorageFactory(): StorageService {\n    try {\n        if (typeof localStorage as any !== 'undefined' && isStorageAvailable(localStorage)) {\n            return new WebStorageService(localStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>(\n    'LOCAL_STORAGE',\n    { providedIn: 'root', factory: localStorageFactory }\n);\n","import { NgModule } from '@angular/core';\n\n/**\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\n * now 'self providing' in the root injector.\n */\n@NgModule()\nexport class StorageServiceModule {\n\n}\n"]}