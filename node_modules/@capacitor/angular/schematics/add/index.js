"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const workspace_1 = require("@schematics/angular/utility/workspace");
const typescript_1 = require("typescript");
const ast_utils_1 = require("../utils/devkit-utils/ast-utils");
const getPackageManager_1 = require("../utils/getPackageManager");
const package_1 = require("./../utils/package");
function addCapacitorToPackageJson() {
    return (host) => {
        package_1.addPackageToPackageJson(host, 'dependencies', '@capacitor/core', 'latest');
        package_1.addPackageToPackageJson(host, 'devDependencies', '@capacitor/cli', 'latest');
        return host;
    };
}
function getTsSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not read file (${path}).`);
    }
    const content = buffer.toString();
    const source = typescript_1.createSourceFile(path, content, typescript_1.ScriptTarget.Latest, true);
    return source;
}
function addCapPluginsToAppComponent(projectSourceRoot) {
    return (host) => {
        const modulePath = `${projectSourceRoot}/app/app.component.ts`;
        const moduleSource = getTsSourceFile(host, modulePath);
        const importModule = 'Plugins';
        const importPath = '@capacitor/core';
        if (!ast_utils_1.isImported(moduleSource, importModule, importPath)) {
            const change = ast_utils_1.insertImport(moduleSource, modulePath, importModule, importPath, false);
            if (change) {
                const recorder = host.beginUpdate(modulePath);
                recorder.insertLeft(change.pos, change.toAdd);
                host.commitUpdate(recorder);
            }
        }
        return host;
    };
}
function capInit(projectName, npmTool, webDir) {
    return (host, context) => {
        const packageInstall = context.addTask(new tasks_1.NodePackageInstallTask());
        const command = npmTool === 'npm' ? 'npx' : 'yarn';
        context.addTask(new tasks_1.RunSchematicTask('cap-init', {
            command,
            args: [
                'cap',
                'init',
                projectName,
                '--npm-client',
                npmTool,
                '--web-dir',
                webDir,
            ],
        }), [packageInstall]);
        return host;
    };
}
function ngAdd(options) {
    return async (host) => {
        const workspace = await workspace_1.getWorkspace(host);
        if (!options.project) {
            options.project = workspace.extensions.defaultProject;
        }
        const projectTree = workspace.projects.get(options.project);
        if (projectTree.extensions['projectType'] !== 'application') {
            throw new schematics_1.SchematicsException(`Capacitor Add requires a project type of "application".`);
        }
        const packageMgm = getPackageManager_1.getPackageManager(projectTree.root);
        const distTarget = projectTree.targets.get('build').options['outputPath'];
        const sourcePath = projectTree.sourceRoot;
        return schematics_1.chain([
            addCapacitorToPackageJson(),
            addCapPluginsToAppComponent(sourcePath),
            capInit(options.project, packageMgm, distTarget),
        ]);
    };
}
exports.default = ngAdd;
